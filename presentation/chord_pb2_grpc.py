# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from . import chord_pb2 as chord__pb2

GRPC_GENERATED_VERSION = '1.73.1'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in chord_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class ChordStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.FindSuccessor = channel.unary_unary(
                '/chord.Chord/FindSuccessor',
                request_serializer=chord__pb2.FindSuccessorRequest.SerializeToString,
                response_deserializer=chord__pb2.FindSuccessorResponse.FromString,
                _registered_method=True)
        self.FindPredecessor = channel.unary_unary(
                '/chord.Chord/FindPredecessor',
                request_serializer=chord__pb2.FindPredecessorRequest.SerializeToString,
                response_deserializer=chord__pb2.FindPredecessorResponse.FromString,
                _registered_method=True)
        self.SetSuccessor = channel.unary_unary(
                '/chord.Chord/SetSuccessor',
                request_serializer=chord__pb2.SetSuccessorRequest.SerializeToString,
                response_deserializer=chord__pb2.SetSuccessorResponse.FromString,
                _registered_method=True)
        self.SetPredecessor = channel.unary_unary(
                '/chord.Chord/SetPredecessor',
                request_serializer=chord__pb2.SetPredecessorRequest.SerializeToString,
                response_deserializer=chord__pb2.SetPredecessorResponse.FromString,
                _registered_method=True)
        self.Notify = channel.unary_unary(
                '/chord.Chord/Notify',
                request_serializer=chord__pb2.NotifyRequest.SerializeToString,
                response_deserializer=chord__pb2.NotifyResponse.FromString,
                _registered_method=True)
        self.UpdateFingerTable = channel.unary_unary(
                '/chord.Chord/UpdateFingerTable',
                request_serializer=chord__pb2.UpdateFingerTableRequest.SerializeToString,
                response_deserializer=chord__pb2.UpdateFingerTableResponse.FromString,
                _registered_method=True)
        self.FixFingers = channel.unary_unary(
                '/chord.Chord/FixFingers',
                request_serializer=chord__pb2.FixFingersRequest.SerializeToString,
                response_deserializer=chord__pb2.FixFingersResponse.FromString,
                _registered_method=True)
        self.Stabilize = channel.unary_unary(
                '/chord.Chord/Stabilize',
                request_serializer=chord__pb2.StabilizeRequest.SerializeToString,
                response_deserializer=chord__pb2.StabilizeResponse.FromString,
                _registered_method=True)
        self.GetInformation = channel.unary_unary(
                '/chord.Chord/GetInformation',
                request_serializer=chord__pb2.GetInfoRequest.SerializeToString,
                response_deserializer=chord__pb2.GetInfoResponse.FromString,
                _registered_method=True)
        self.NodeHasInformation = channel.unary_unary(
                '/chord.Chord/NodeHasInformation',
                request_serializer=chord__pb2.NodeHasInformationRequest.SerializeToString,
                response_deserializer=chord__pb2.NodeHasInformationResponse.FromString,
                _registered_method=True)
        self.AddInformation = channel.unary_unary(
                '/chord.Chord/AddInformation',
                request_serializer=chord__pb2.AddInfoRequest.SerializeToString,
                response_deserializer=chord__pb2.AddInfoResponse.FromString,
                _registered_method=True)
        self.RemoveInformation = channel.unary_unary(
                '/chord.Chord/RemoveInformation',
                request_serializer=chord__pb2.RemoveInfoRequest.SerializeToString,
                response_deserializer=chord__pb2.RemoveInfoResponse.FromString,
                _registered_method=True)
        self.GetNodeInformation = channel.unary_unary(
                '/chord.Chord/GetNodeInformation',
                request_serializer=chord__pb2.GetNodeInfoRequest.SerializeToString,
                response_deserializer=chord__pb2.GetNodeInfoResponse.FromString,
                _registered_method=True)
        self.GetAllNodeInfo = channel.unary_unary(
                '/chord.Chord/GetAllNodeInfo',
                request_serializer=chord__pb2.GetAllInfoRequest.SerializeToString,
                response_deserializer=chord__pb2.GetAllInfoResponse.FromString,
                _registered_method=True)
        self.GetNodeStats = channel.unary_unary(
                '/chord.Chord/GetNodeStats',
                request_serializer=chord__pb2.GetNodeStatsRequest.SerializeToString,
                response_deserializer=chord__pb2.GetNodeStatsResponse.FromString,
                _registered_method=True)
        self.GetLogs = channel.unary_unary(
                '/chord.Chord/GetLogs',
                request_serializer=chord__pb2.LogsRequest.SerializeToString,
                response_deserializer=chord__pb2.LogsResponse.FromString,
                _registered_method=True)


class ChordServicer(object):
    """Missing associated documentation comment in .proto file."""

    def FindSuccessor(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FindPredecessor(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetSuccessor(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetPredecessor(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Notify(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateFingerTable(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FixFingers(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Stabilize(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetInformation(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def NodeHasInformation(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddInformation(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RemoveInformation(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetNodeInformation(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAllNodeInfo(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetNodeStats(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetLogs(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ChordServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'FindSuccessor': grpc.unary_unary_rpc_method_handler(
                    servicer.FindSuccessor,
                    request_deserializer=chord__pb2.FindSuccessorRequest.FromString,
                    response_serializer=chord__pb2.FindSuccessorResponse.SerializeToString,
            ),
            'FindPredecessor': grpc.unary_unary_rpc_method_handler(
                    servicer.FindPredecessor,
                    request_deserializer=chord__pb2.FindPredecessorRequest.FromString,
                    response_serializer=chord__pb2.FindPredecessorResponse.SerializeToString,
            ),
            'SetSuccessor': grpc.unary_unary_rpc_method_handler(
                    servicer.SetSuccessor,
                    request_deserializer=chord__pb2.SetSuccessorRequest.FromString,
                    response_serializer=chord__pb2.SetSuccessorResponse.SerializeToString,
            ),
            'SetPredecessor': grpc.unary_unary_rpc_method_handler(
                    servicer.SetPredecessor,
                    request_deserializer=chord__pb2.SetPredecessorRequest.FromString,
                    response_serializer=chord__pb2.SetPredecessorResponse.SerializeToString,
            ),
            'Notify': grpc.unary_unary_rpc_method_handler(
                    servicer.Notify,
                    request_deserializer=chord__pb2.NotifyRequest.FromString,
                    response_serializer=chord__pb2.NotifyResponse.SerializeToString,
            ),
            'UpdateFingerTable': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateFingerTable,
                    request_deserializer=chord__pb2.UpdateFingerTableRequest.FromString,
                    response_serializer=chord__pb2.UpdateFingerTableResponse.SerializeToString,
            ),
            'FixFingers': grpc.unary_unary_rpc_method_handler(
                    servicer.FixFingers,
                    request_deserializer=chord__pb2.FixFingersRequest.FromString,
                    response_serializer=chord__pb2.FixFingersResponse.SerializeToString,
            ),
            'Stabilize': grpc.unary_unary_rpc_method_handler(
                    servicer.Stabilize,
                    request_deserializer=chord__pb2.StabilizeRequest.FromString,
                    response_serializer=chord__pb2.StabilizeResponse.SerializeToString,
            ),
            'GetInformation': grpc.unary_unary_rpc_method_handler(
                    servicer.GetInformation,
                    request_deserializer=chord__pb2.GetInfoRequest.FromString,
                    response_serializer=chord__pb2.GetInfoResponse.SerializeToString,
            ),
            'NodeHasInformation': grpc.unary_unary_rpc_method_handler(
                    servicer.NodeHasInformation,
                    request_deserializer=chord__pb2.NodeHasInformationRequest.FromString,
                    response_serializer=chord__pb2.NodeHasInformationResponse.SerializeToString,
            ),
            'AddInformation': grpc.unary_unary_rpc_method_handler(
                    servicer.AddInformation,
                    request_deserializer=chord__pb2.AddInfoRequest.FromString,
                    response_serializer=chord__pb2.AddInfoResponse.SerializeToString,
            ),
            'RemoveInformation': grpc.unary_unary_rpc_method_handler(
                    servicer.RemoveInformation,
                    request_deserializer=chord__pb2.RemoveInfoRequest.FromString,
                    response_serializer=chord__pb2.RemoveInfoResponse.SerializeToString,
            ),
            'GetNodeInformation': grpc.unary_unary_rpc_method_handler(
                    servicer.GetNodeInformation,
                    request_deserializer=chord__pb2.GetNodeInfoRequest.FromString,
                    response_serializer=chord__pb2.GetNodeInfoResponse.SerializeToString,
            ),
            'GetAllNodeInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAllNodeInfo,
                    request_deserializer=chord__pb2.GetAllInfoRequest.FromString,
                    response_serializer=chord__pb2.GetAllInfoResponse.SerializeToString,
            ),
            'GetNodeStats': grpc.unary_unary_rpc_method_handler(
                    servicer.GetNodeStats,
                    request_deserializer=chord__pb2.GetNodeStatsRequest.FromString,
                    response_serializer=chord__pb2.GetNodeStatsResponse.SerializeToString,
            ),
            'GetLogs': grpc.unary_unary_rpc_method_handler(
                    servicer.GetLogs,
                    request_deserializer=chord__pb2.LogsRequest.FromString,
                    response_serializer=chord__pb2.LogsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'chord.Chord', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('chord.Chord', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class Chord(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def FindSuccessor(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/chord.Chord/FindSuccessor',
            chord__pb2.FindSuccessorRequest.SerializeToString,
            chord__pb2.FindSuccessorResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def FindPredecessor(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/chord.Chord/FindPredecessor',
            chord__pb2.FindPredecessorRequest.SerializeToString,
            chord__pb2.FindPredecessorResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetSuccessor(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/chord.Chord/SetSuccessor',
            chord__pb2.SetSuccessorRequest.SerializeToString,
            chord__pb2.SetSuccessorResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetPredecessor(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/chord.Chord/SetPredecessor',
            chord__pb2.SetPredecessorRequest.SerializeToString,
            chord__pb2.SetPredecessorResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Notify(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/chord.Chord/Notify',
            chord__pb2.NotifyRequest.SerializeToString,
            chord__pb2.NotifyResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateFingerTable(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/chord.Chord/UpdateFingerTable',
            chord__pb2.UpdateFingerTableRequest.SerializeToString,
            chord__pb2.UpdateFingerTableResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def FixFingers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/chord.Chord/FixFingers',
            chord__pb2.FixFingersRequest.SerializeToString,
            chord__pb2.FixFingersResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Stabilize(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/chord.Chord/Stabilize',
            chord__pb2.StabilizeRequest.SerializeToString,
            chord__pb2.StabilizeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetInformation(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/chord.Chord/GetInformation',
            chord__pb2.GetInfoRequest.SerializeToString,
            chord__pb2.GetInfoResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def NodeHasInformation(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/chord.Chord/NodeHasInformation',
            chord__pb2.NodeHasInformationRequest.SerializeToString,
            chord__pb2.NodeHasInformationResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def AddInformation(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/chord.Chord/AddInformation',
            chord__pb2.AddInfoRequest.SerializeToString,
            chord__pb2.AddInfoResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RemoveInformation(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/chord.Chord/RemoveInformation',
            chord__pb2.RemoveInfoRequest.SerializeToString,
            chord__pb2.RemoveInfoResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetNodeInformation(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/chord.Chord/GetNodeInformation',
            chord__pb2.GetNodeInfoRequest.SerializeToString,
            chord__pb2.GetNodeInfoResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetAllNodeInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/chord.Chord/GetAllNodeInfo',
            chord__pb2.GetAllInfoRequest.SerializeToString,
            chord__pb2.GetAllInfoResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetNodeStats(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/chord.Chord/GetNodeStats',
            chord__pb2.GetNodeStatsRequest.SerializeToString,
            chord__pb2.GetNodeStatsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetLogs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/chord.Chord/GetLogs',
            chord__pb2.LogsRequest.SerializeToString,
            chord__pb2.LogsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
