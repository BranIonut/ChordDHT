class NodeNetworkInterface:
    def find_successor(self, target_id: int, key: int) -> int: ...

    def get_predecessor(self, target_id: int) -> int: ...

    def set_predecessor(self, target_id: int, new_predecessor_id: int): ...

    def set_successor(self, target_id: int, new_successor_id: int): ...

    def get_successor(self, target_id: int) -> int: ...

    def notify(self, target_id: int, sender_id: int): ...

    def update_finger_table(self, target_id: int, new_node_id: int, index: int): ...

    def get_information(self, target_node_id: int, info_key: int) -> [str | None]: ...

    def add_information(self, target_node_id: int, info_key: int, info: str): ...

    def remove_information(self, target_node_id: int, info_key: int): ...

    def add_redundant_info(self, target_node_id: int, info_key: int, info: str): ...

    def remove_redundant_info(self, target_node_id: int, info_key: int): ...
